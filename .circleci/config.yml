# testing using CircleCI orb
# see https://on.cypress.io/circleci-orb

# to use CircleCI orbs need to use version >= 2.1
version: 2.1
orbs:
  # use Cypress orb from CircleCI registry
  cypress: cypress-io/cypress@1.14.0

executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node14.16.0-chrome89-ff86'
workflows:
  build:
    jobs:
      - cypress/install
        # runs tests using Chrome browser in custom executor (Cypress docker image)
      - cypress/run:
          requires:
            - cypress/install
          start: apt-get install -y sed && circleci tests glob "tests/e2e/*/*.js" | circleci tests split > circleci.tests && sed -i 's/No timing found for "//g' circleci.tests && sed -i 's/"//g' circleci.tests && sed -i 's/tests\/e2e\/plugins\/index.js//g' circleci.tests && sed -i 's/tests\/e2e\/.eslintrc.js//g' circleci.tests && sed -i 's/tests\/unit\/.eslintrc.js//g' circleci.tests && grep "\S" circleci.tests > uno.txt && mv uno.txt circleci.tests  && cat circleci.tests && npm rebuild node-sass && npx browserslist@latest --update-db && npm run serve
          wait-on: 'http://localhost:8080'
          executor: with-chrome
          browser: chrome
          #command: 'npm install -g npm@latest && npm run lint && npm test'
          command: 'npm install -g npm@latest && npm run lint && TZ=UTC npx vue-cli-service test:e2e --mode test --headless --browser chrome --reporter mocha-junit-reporter --reporter-options mochaFile=reports/mocha/test-results.xml --spec $(cat circleci.tests | tr "\n" ",")'
          parallel: true
          parallelism: 7
          post-steps:
            - run: mkdir coverage && mv .nyc_output/out.json coverage/coverage-$CIRCLE_NODE_INDEX-$(date +"%s%N").json
            - save_cache:
                paths:
                  coverage/
                key: pm-{{ .Environment.CIRCLE_NODE_INDEX }}-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - run: ls -la coverage
      - cypress/run:
          requires:
            - cypress/run
          command: npm run test-unit
          post-steps:
            - restore_cache:
                keys:
                  - pm-0-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-1-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-2-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-3-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-4-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-5-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-6-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-7-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-8-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - restore_cache:
                keys:
                  - pm-9-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-coverage.json
            - run: ls -la coverage && cp jest-coverage/coverage-final.json coverage/from-jest.json
            - run: npx nyc merge coverage && mkdir .nyc_output
            - run: mv coverage.json .nyc_output/out.json
            - run: npx nyc report --reporter html --reporter text --reporter json-summary --report-dir combined-coverage
            
            - store_artifacts:
                path: combined-coverage
            - store_test_results:
                path: test_summary_reports 
